// KeystampAPI
// =============================================================================
// Author : Jean-Philippe beaudet @s3r3nity
//
// ./router/2wayauth.js
//
// Keystamp-api router
// =============================================================================

var config = require('../config'); // get our config file
var morgan      = require('morgan');
var jwt    = require('jsonwebtoken'); // used to create, sign, and verify tokens
var config = require('../config'); // get our config file
var User   = require('../app/models/user'); // get our mongoose model
var App   = require('../app/models/app'); // get our mongoose model
var request = require('request')
//var Message = require('../app/models/message')
var notify = require('../app/notify')
var BASE_URL = config.KSTMP_CRYTO_BASE_URL
var monthNames = [
  "January", "February", "March",
  "April", "May", "June", "July",
  "August", "September", "October",
  "November", "December"
];
//require the Twilio module and create a REST client
var client = require('twilio')(config.ACCOUNT_SID, config.AUTH_TOKEN);

var telesign = require('telesign').setup({
  customerId: config.customerId,
  apiKey: config.apiKey
});

module.exports = function (supersecret, router) {
// Telesign
//==============================
// not used by default
router.route('/send_telesign/:users_id')
    .get(function(req, res) {
		User.findOne({"uid": req.params.users_id}, function(err, user) {
		if (err){
			return res.status(403).send({ 
			success: false, 
			message: 'No messages yet'
			});
		}
		var phone = user.phone
		var pin = Math.random(5)
		var options = {
		phoneNumber: phone, // required
		ucid: 'BACF', // optional
		originatingIp: '', // optional
		language: '', // optional, defaults to 'en-US'
		verifyCode: pin, // optional, defaults to random value generated by TeleSign
		extensionType: 1, // optional, 1 for automated attendants, 2 for live operators, not included by default
		extensionTemplate: '1,,333', // optional, required if extensionType is specified, not included by default,
		redial: true // optional, defaults to true
	};
	
	user.last_pin = pin
	user.save()
	telesign.verify.call(options, function(err, response) {
		// err: failed request or error in TeleSign response
		// response: JSON response from TeleSign
		console.log(response)
	});
});
});

router.route('/verify_telesign/:users_id')
	.post(function(req, res) {
		var value = req.body.value	
		User.findOne({"uid": req.params.users_id}, function(err, user) {
		if (err){
			return res.status(403).send({ 
			success: false, 
			message: 'user does not exist'
			});
		}
		var pin = user.last_pin
		if (value != pin){
			return res.status(403).send({ 
			success: false, 
			message: 'pin does not match'
			});
		}else{
			res.setHeader('status', 200)
			res.setHeader("Content-Type", "application/json;charset=UTF-8")
			res.json({ success:true , message: 'Pin matched successfully' });	
		}	
	});
});

router.route('/send_sms/:users_id')
	.get(function(req, res) {
		User.findOne({"uid": req.params.users_id}, function(err, user) {
		if (err){
			return res.status(403).send({ 
			success: false, 
			message: 'No messages yet'
			});
		}
		var phone = user.phone
		var pin = Math.floor(Math.random()*90000) + 10000;
		user.last_pin = pin
		user.save()
		var re = /\(?(\d{3})\)?[- ]?(\d{3})[- ]?(\d{4})/g; 
		var subst = '$1 $2-$3'; 
		//var result = String(phone).replace(re, subst); 
		var result = '514-607-9665' // test number 
		console.log(result)
		//Send an SMS text message
		client.sendMessage({
			to: result, // Any number Twilio can deliver to
			from: config.twilio_phone, // A number you bought from Twilio and can use for outbound communication
			body: pin // body of the SMS message
		}, function(err, responseData) { //this function is executed when a response is received from Twilio
			if (!err) { // "err" is an error received during the request, if any
				// "responseData" is a JavaScript object containing data received from Twilio.
				// A sample response from sending an SMS message is here (click "JSON" to see how the data appears in JavaScript):
				// http://www.twilio.com/docs/api/rest/sending-sms#example-1
				res.setHeader('status', 200)
				res.setHeader("Content-Type", "application/json;charset=UTF-8")
				res.json({ success:true , message: 'sms sent successfully' });
				console.log(responseData.from); // outputs "+14506667788"
				console.log(responseData.body); // outputs "word to your mother."
			}
		});
	});
});

router.route('/verify_sms/:users_id')
	.post(function(req, res) {
		var value = req.body.value	
		User.findOne({"uid": req.params.users_id}, function(err, user) {
		if (err){
			return res.status(403).send({ 
			success: false, 
			message: 'user does not exist'
			});
		}
		var pin = user.last_pin
		if (value != pin){
			return res.status(403).send({ 
			success: false, 
			message: 'pin does not match'
			});
		}else{
			if(req.body.accepted){
				user.status = "pin_confirmed"
			}
			user.lastUpdated = Date.now()
			user.save()
			res.setHeader('status', 200)
			res.setHeader("Content-Type", "application/json;charset=UTF-8")
			res.json({ success:true , message: 'Pin matched successfully' });	
		}
	});
});
	
}
