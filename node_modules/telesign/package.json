{
  "_args": [
    [
      {
        "raw": "https://github.com/ArthurGerbelot/node-telesign/tarball/master",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "https://github.com/ArthurGerbelot/node-telesign/tarball/master",
        "spec": "https://github.com/ArthurGerbelot/node-telesign/tarball/master",
        "type": "remote"
      },
      "/home/jpbeaudet/keystamp-api"
    ]
  ],
  "_from": "https://github.com/ArthurGerbelot/node-telesign/tarball/master",
  "_id": "telesign@1.0.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/telesign",
  "_phantomChildren": {},
  "_requested": {
    "raw": "https://github.com/ArthurGerbelot/node-telesign/tarball/master",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "https://github.com/ArthurGerbelot/node-telesign/tarball/master",
    "spec": "https://github.com/ArthurGerbelot/node-telesign/tarball/master",
    "type": "remote"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://github.com/ArthurGerbelot/node-telesign/tarball/master",
  "_shasum": "9c90afb3abbb33f85b9a0cd0d65213c839d3e01e",
  "_shrinkwrap": null,
  "_spec": "https://github.com/ArthurGerbelot/node-telesign/tarball/master",
  "_where": "/home/jpbeaudet/keystamp-api",
  "author": {
    "name": "Giftnix"
  },
  "bugs": {
    "url": "https://github.com/giftnix/node-telesign/issues"
  },
  "dependencies": {
    "moment": "2.x.x",
    "query-string": "3.x.x",
    "request": "2.x.x"
  },
  "description": "NodeJS SDK for the TeleSign APIs",
  "devDependencies": {
    "chai": "*",
    "grunt": "*",
    "grunt-simple-mocha": "*"
  },
  "homepage": "https://github.com/giftnix/node-telesign#readme",
  "keywords": [
    "telesign",
    "api",
    "rest",
    "sdk",
    "wrapper",
    "phone",
    "verification",
    "sms"
  ],
  "license": "MIT",
  "main": "telesign.js",
  "name": "telesign",
  "optionalDependencies": {},
  "readme": "[![NPM version][npm-version-image]][npm-url] [![NPM downloads][npm-downloads-image]][npm-url] [![MIT License][license-image]][license-url] [![Build Status][travis-image]][travis-url]\n\n# TeleSign SDK for NodeJS\n\nA NodeJS wrapper for the TeleSign REST APIs.\n\nInstall via npm:\n\n    npm install --save telesign\n\n## SDK Setup\n\nRequire the module and call ``setup()``:\n\n    var telesign = require('telesign').setup({\n      customerId: 'AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE',\n      apiKey: 'your/APIKey=='\n    });\n\nYou can find your Customer ID and API Key on the TelePortal at [https://teleportal.telesign.com/](https://teleportal.telesign.com/) (leave your API Key in the base64 format as listed).\n\n### Optional Setup Parameters\n\n- ``version`` - API version as a numeric string ***defaults to '1'***\n- ``authMethod`` - either ``sha1`` or ``sha256`` ***defaults to 'sha256'***\n- ``timeout`` - request timeout, in milliseconds, before returning an error ***defaults to 3000***\n\n## Available Endpoints\n\nFor resources that require a ``phoneNumber``, provide a \"complete phone number composed of a string of digits without spaces or punctuation, beginning with the Country Dialing Code (e.g., “1” for North America).\"\n\nFor resources that require a ``ucid``, see the list of available Use Case Codes at [http://docs.telesign.com/rest/content/xt/xt-use-case-codes.html#xref-use-case-codes](http://docs.telesign.com/rest/content/xt/xt-use-case-codes.html#xref-use-case-codes).\n\n## PhoneID\n\n### Get PhoneID Standard\n\nThe PhoneID Standard web service returns information about a specified phone number.\n\n    var options = {\n      phoneNumber: '15551234567', // required\n    };\n\n    telesign.phoneId.score(options, function(err, response) {\n      // err: failed request or error in TeleSign response\n      // response: JSON response from TeleSign\n    });\n\n### Get PhoneID Score\n\nThe PhoneID Score web service provides risk information about a specified phone number.\n\n    var options = {\n      phoneNumber: '15551234567', // required\n      ucid: 'BACF' // required\n    };\n\n    telesign.phoneId.score(options, function(err, response) {\n      // err: failed request or error in TeleSign response\n      // response: JSON response from TeleSign\n    });\n\n### Get PhoneID Contact\n\nThe PhoneID Contact web service provides contact details for a specified phone number’s subscriber\n\n    var options = {\n      phoneNumber: '15551234567', // required\n      ucid: 'BACF' // required\n    };\n\n    telesign.phoneId.contact(options, function(err, response) {\n      // err: failed request or error in TeleSign response\n      // response: JSON response from TeleSign\n    });\n\n### Get PhoneID Live\n\nThe PhoneID Live web service provides information about a specified phone number’s state of operation\n\n**Note: The information returned by PhoneID Live includes the information returned by PhoneID Standard.**\n\n    var options = {\n      phoneNumber: '15551234567', // required\n      ucid: 'BACF' // required\n    };\n\n    telesign.phoneId.live(options, function(err, response) {\n      // err: failed request or error in TeleSign response\n      // response: JSON response from TeleSign\n    });\n\n## Verify\n\n### Verify by Call\n\nThe TeleSign Verify Call web service sends a verification code to your end user in a voice message with a phone call.\n\n    var options = {\n      phoneNumber: '15551234567', // required\n      ucid: 'BACF', // optional\n      originatingIp: '', // optional\n      language: '', // optional, defaults to 'en-US'\n      verifyCode: 12345, // optional, defaults to random value generated by TeleSign\n      extensionType: 1, // optional, 1 for automated attendants, 2 for live operators, not included by default\n      extensionTemplate: '1,,333' // optional, required if extensionType is specified, not included by default,\n      redial: true // optional, defaults to true\n    };\n\n    telesign.verify.call(options, function(err, response) {\n      // err: failed request or error in TeleSign response\n      // response: JSON response from TeleSign\n    });\n\n### Verify by SMS\n\nThe TeleSign Verify SMS web service sends a verification code to your end user in a text message.\n\n    var options = {\n      phoneNumber: '15551234567', // required\n      ucid: 'BACF', // optional\n      originatingIp: '', // optional\n      language: '', // optional, defaults to 'en-US'\n      verifyCode: 12345, // optional, defaults to random value generated by TeleSign\n      template: 'Your code is $$CODE$$' // optional, must include a $$CODE$$ placeholder to integrate the verifyCode token\n    };\n\n    telesign.verify.sms(options, function(err, response) {\n      // err: failed request or error in TeleSign response\n      // response: JSON response from TeleSign\n    });\n\n### Verify by 2-Way SMS\n\nThe TeleSign Verify 2-Way SMS web service allows you to authenticate your users and verify user transactions via two-way Short Message Service (SMS) wireless communication. Verification requests are sent to users in a text message, and users return their verification responses by replying to the text message.\n\n    var options = {\n      phoneNumber: '15551234567', // required\n      ucid: 'BACF', // required\n      message: 'Test message with code \"$$CODE$$\" (reply \"YES $$CODE$$\" or \"NO $$CODE$$\")', // required, must include a $$CODE$$ placeholder to integrate the verifyCode token\n      validityPeriod: '2m' // required, a string consisting of a number followed by the period of time ('s' for seconds, 'm' for minutes', 'h' for hours, 'd' for days)\n    };\n\n    telesign.verify.twoWaySms(options, function(err, response) {\n      // err: failed request or error in TeleSign response\n      // response: JSON response from TeleSign\n    });\n\n### Verify by Push\n\nThe TeleSign Verify Push web service is a server-side component of the TeleSign AuthID application, and it allows you to provide on-device transaction authorization for your users. It works by delivering authorization requests to your users via Push Notification, and then by receiving their permission responses via their mobile device’s wireless Internet connection. The service provides two levels of security to support two types of transactions.\n\n    var options = {\n      phoneNumber: '15551234567', // required\n      notificationType: 'SIMPLE', // optional, either 'CODE' or 'SIMPLE', defaults to 'SIMPLE'\n      notificationValue: 719650, // optional, defaults to random value generated by TeleSign\n      template: 'mobile_2fa', // required, TeleSign Client Services provides the template name when you enable this from your account and provide us with your artwork,\n      message: 'Enter the code display on our web site.' // optional, automatic if not provided\n    };\n\n    telesign.verify.push(options, function(err, response) {\n      // err: failed request or error in TeleSign response\n      // response: JSON response from TeleSign\n    });\n\n### Verify Soft Token\n\nThe TeleSign Verify Soft Token web service is a server-side component of the TeleSign AuthID application, and it allows you to authenticate your end users when they use the TeleSign AuthID application on their mobile device to generate a Time-based One-time Password (TOTP) verification code.\n\n    var options = {\n      phoneNumber: '15551234567', // required\n      softTokenId: '', // optional\n      verifyCode: 719650, // required, the verification code received from the end user\n    };\n\n    telesign.verify.push(options, function(err, response) {\n      // err: failed request or error in TeleSign response\n      // response: JSON response from TeleSign\n    });\n\n### Verify Registration\n\nThe TeleSign Verify Registration web service allows you to query TeleSign to determine the current state of the AuthID application registration.\n\n    var options = {\n      phoneNumber: '15551234567', // required\n      mobileAppSignature: '' // optional\n    };\n\n    telesign.verify.verifyRegistration(options, function(err, response) {\n      // err: failed request or error in TeleSign response\n      // response: JSON response from TeleSign\n    });\n\n### Get the Verification Results\n\nOnce a verificaiton has been placed via call or SMS, you can get the results of the verification at any time using the reference ID that is sent back after your verification request is placed.\n\n    telesign.verify.get({\n      referenceId: '11111BB222A33F44444444DDCCA1FC33'\n    }, function(err, response) {\n      // err: failed request or error in TeleSign response\n      // response: JSON response from TeleSign\n    });\n\n**You have 12 hours to get these results.**\n\nYou can have TeleSign push the results to you automatically by subscribing to a [Verify Transaction Callback](http://docs.telesign.com/rest/content/transaction-callback.html#xref-transaction-callback).\n\n### Smart Verify\n\n*Not yet implemented in this module.*\n\n## Mobile Device\n\n*Not yet implemented in this module.*\n\n## TeleBureau\n\n### Submit a TeleBureau Event\n\nThe TeleBureau Event web service allows you to programmatically submit a telephone number to TeleSign, as a candidate for addition to our TeleBureau watchlist.\n\nDetails on the options for the API to submit a TeleBureau event can be found [here](http://docs.telesign.com/rest/content/telebureau-event.html#request-parameters).\n\n    var options = {\n      phoneNumber: '15551234567', // required\n      fraudType: 'chargeback' // required, see list at above URL\n      occuredAt: new Date(), // required, uses a JavaScript Date object\n      discoveredAt: new Date(), // optional, uses a JavaScript Date object\n      fraudIp: '', // optional\n      impactType: 'revenue_loss', // optional, see list at above URL\n      impact: 'medium', // optional, 'low', 'medium', or 'high' depending on dollar amount, see list at above URL for details\n      verifiedBy: 'telesign', // optional, either 'telesign' or 'other'\n      verifiedAt: new Date() // optional, uses a JavaScript Date object\n    };\n\n    telesign.teleBureau.submitEvent(options, function(err, response) {\n      // err: failed request or error in TeleSign response\n      // response: JSON response from TeleSign\n    });\n\n### Get a TeleBureau Event\n\nAfter you’ve submitted a Fraud Event, you can check to see whether TeleSign accepted it (and therefore added it to the TeleBureau watchlist) by sending a GET request to the resource created.\n\n    telesign.teleBureau.getEvent({\n      referenceId: '11111BB222A33F44444444DDCCA1FC33'\n    }, function(err, response) {\n      // err: failed request or error in TeleSign response\n      // response: JSON response from TeleSign\n    });\n\n### Delete a TeleBureau Event\n\nAfter you’ve made your submission request, you can cancel it by sending a DELETE request to the resource indicated by appending the Reference ID returned in response to your submission request.\n\n    telesign.teleBureau.deleteEvent({\n      referenceId: '11111BB222A33F44444444DDCCA1FC33'\n    }, function(err, response) {\n      // err: failed request or error in TeleSign response\n      // response: JSON response from TeleSign\n    });\n\n## CHANGELOG\n\n- **1.0.0**: Public launch\n- **0.1.1**: Default to SHA256. Tested to work with new Telesign security requirements.\n- **0.1.0**: Initial release.\n\n[license-image]: http://img.shields.io/badge/license-MIT-blue.svg?style=flat-square\n[license-url]: https://github.com/giftnix/telesign/blob/master/LICENSE\n\n[npm-version-image]: http://img.shields.io/npm/v/telesign.svg?style=flat-square\n[npm-downloads-image]: http://img.shields.io/npm/dm/telesign.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/telesign\n\n[travis-image]: http://img.shields.io/travis/giftnix/telesign.svg?style=flat-square\n[travis-url]: http://travis-ci.org/giftnix/telesign",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/giftnix/node-telesign.git"
  },
  "scripts": {
    "test": "grunt test"
  },
  "version": "1.0.0"
}
